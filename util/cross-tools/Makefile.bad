PKG_NAME=cross-tools-$(TOOL_ARCH)
PKG_VERSION=$(OS_NAME_LOWERCASE)_$(OS_VERSION)
PKG_BUILD=1
PKG_BUILDSYSTEM=custom-common

PKG_BUILD_DEPENDS=musl zlib flex

# Versions of the toolchain packages
GCC_VERSION=9.3.0
BINUTILS_VERSION=2.34
MUSL_VERSION=1.2.0

PkG_WGET_URLS=

include toolchain.mk
include package.mk

###### Hold on, this is where the fun begins! #####

# Set a bunch of variables that control the build process

# The destination directory that the final toolchain wil reside in.
DESTDIR=/opt/cross
# The triple for the target system. Note the use of TOOL_ARCH in the place of
# the usual OS_ARCH.
TARGET=$(TOOL_ARCH)-$(OS_NAME_LOWERCASE)-linux-musl
# The temporary system root to use during the bootstrap process for installing
# the temporary build of musl.
BUILD_SYSROOT=$(CURDIR)/pkg_src/buildroot
# The actual system root for the final toolchain to target. Note that this will
# be included as the --sysroot= option for all invocations of the final
# toolchain (unless it is explicitly overridden on the command line).
SYSROOT?=/
# Some aliases for convenience
WORKDIR=$(CURDIR)/pkg_src
DOWNLOADDIR=$(CURDIR)
BUILDDIR=$(WORKDIR)/build
# The languages to enable in the final toolchain. C and C++ are sufficient for
# compiling the entire operating system.
ENABLED_LANGUAGES=c,c++

null:=
space:= $(null) $(null)
comma:= ,

# Include PKG_ROOT/DESTDIR (the place the final tools will be installed) and
# BUILD_SYSROOT (the place the static temporary tools will be installed) in the
# PATH. Make sure PKG_ROOT/DESTDIR comes first so that the final version of the
# tools always take precedence when available.
PATH:=$(PKG_ROOT)/$(DESTDIR)/bin:$(PATH)
export PATH
UNAME:=$(shell uname -o)

# Explicitly set the shell to Bash. Some recent Debian versions use Dash for
# /bin/sh, and some other distributions and operating systems use the older
# Bourne shell. Both of these are known to break the build.
ifeq ($(UNAME), Fidelix)
# On Fidelix, explicitly use the pkgsrc provided bash
CONFIG_SHELL:=/usr/pkg/bin/bash
else
CONFIG_SHELL?=$(shell which bash)
CONFIG_SHELL:=$(CONFIG_SHELL)
endif
ifeq ($(CONFIG_SHELL), )
$(error Could not find bash in the PATH. Compilation is known to have issues when using a shell other than Bash. To ignore this error, set the CONFIG_SHELL variable to the path of a shell to use)
endif
export CONFIG_SHELL

### Export the compiler settings (if any)
export CC CXX LD CFLAGS CXXFLAGS LDFLAGS

### Temporary Toolchain Configure Args

TMP_BINUTILS_ARGS+= \
	--

### Final Toolchain Configure Args


BINUTILS_CONFIGURE_ARGS+= \
	--prefix="$(DESTDIR)" \
	--target=$(TARGET) \
	--disable-multilib \
	--disable-werror \
	--with-system-zlib \
	--with-sysroot="$(BUILD_SYSROOT)" \
	CONFIG_SHELL=$(CONFIG_SHELL)

GCC_CONFIGURE_ARGS+= \
	--prefix="$(DESTDIR)" \
	--target=$(TARGET) \
	--disable-multilib \
	--disable-werror \
	--with-system-zlib \
	--enable-languages=$(ENABLED_LANGUAGES) \
	--with-sysroot="$(SYSROOT)" \
	--with-build-sysroot="$(BUILD_SYSROOT)" \
	--disable-libsanitizer \
	--disable-libstdcxx \
	CONFIG_SHELL=$(CONFIG_SHELL)

BINUTILS_TARBALL=$(DOWNLOADDIR)/binutils-$(BINUTILS_VERSION).tar.xz
GCC_TARBALL=$(DOWNLOADDIR)/gcc-$(GCC_VERSION).tar.xz
BINUTILS_SRCDIR=$(BUILDDIR)/binutils-$(BINUTILS_VERSION)
GCC_SRCDIR=$(BUILDDIR)/gcc-$(GCC_VERSION)
BINUTILS_BUILDDIR=$(BUILDDIR)/binutils-build
GCC_BUILDDIR=$(BUILDDIR)/gcc-build

.PHONY: build
build: $(DESTDIR)/config-$(TARGET)
	$(MAKE) $(WORKDIR)
	$(MAKE) $(DESTDIR)
	$(MAKE) gcc

$(DESTDIR)/config-$(TARGET): $(CONFIG) $(DESTDIR)
	cp $< $@

.SECONDARY: download
download: $(BINUTILS_TARBALL) $(GCC_TARBALL)

.DELETE_ON_ERROR: $(BINUTILS_TARBALL) $(GCC_TARBALL)
$(BINUTILS_TARBALL):
	$(MAKE) $(DOWNLOADDIR)
	cd $(DOWNLOADDIR) && $(WGET) https://ftp.gnu.org/gnu/binutils/binutils-$(BINUTILS_VERSION).tar.xz
	cd $(DOWNLOADDIR) && $(WGET) https://ftp.gnu.org/gnu/binutils/binutils-$(BINUTILS_VERSION).tar.xz.sig
	$(GPG) --keyring misc/gnu-keyring.gpg --verify $@.sig

$(GCC_TARBALL):
	$(MAKE) $(DOWNLOADDIR)
	cd $(DOWNLOADDIR) && $(WGET) https://ftp.gnu.org/gnu/gcc/gcc-$(GCC_VERSION)/gcc-$(GCC_VERSION).tar.xz
	cd $(DOWNLOADDIR) && $(WGET) https://ftp.gnu.org/gnu/gcc/gcc-$(GCC_VERSION)/gcc-$(GCC_VERSION).tar.xz.sig
	$(GPG) --keyring misc/gnu-keyring.gpg --verify $@.sig

.PHONY: binutils
binutils: $(BINUTILS_BUILDDIR)/Makefile
	$(MAKE) -C $(BINUTILS_BUILDDIR)
	$(MAKE) -C $(BINUTILS_BUILDDIR) install

$(BINUTILS_SRCDIR): | $(BINUTILS_TARBALL) $(SRCDIR)
	cd $(BUILDDIR) && tar xJvf $(BINUTILS_TARBALL)

$(BINUTILS_BUILDDIR)/Makefile: | $(BINUTILS_BUILDDIR) $(BINUTILS_SRCDIR)
	cd $(BINUTILS_BUILDDIR) && \
		$(CONFIG_SHELL) $(BINUTILS_SRCDIR)/configure \
		$(BINUTILS_CONFIGURE_ARGS)

.SECONDARY: gcc
gcc: $(GCC_BUILDDIR)/Makefile binutils
	$(MAKE) -C $(GCC_BUILDDIR)
	$(MAKE) -C $(GCC_BUILDDIR) install

.DELETE_ON_ERROR: $(GCC_SCRDIR)
$(GCC_SRCDIR): | $(GCC_TARBALL) $(SRCDIR)
	cd $(BUILDDIR) && tar xJvf $(GCC_TARBALL)

.SECONDARY: patch-gcc
patch-gcc: .stamp-patch-gcc
.stamp-patch-gcc: $(GCC_SRCDIR)
	echo Patching GCC
ifdef GCC_PATCH_DIR
	for patch in $(wildcard $(GCC_PATCH_DIR)/*.patch); do \
		cd $(GCC_SRCDIR) && patch -p1 < $(CURDIR)/$$patch || exit 1; \
	done
endif
	touch $@

$(GCC_BUILDDIR)/Makefile: | $(GCC_BUILDDIR) $(GCC_SRCDIR) binutils patch-gcc
	cd $(GCC_BUILDDIR) && \
		$(CONFIG_SHELL) $(GCC_SRCDIR)/configure $(GCC_CONFIGURE_ARGS)

$(WORKDIR) $(DOWNLOADDIR) $(BUILDDIR) $(DESTDIR) $(SYSROOT) \
$(BINUTILS_BUILDDIR) $(GCC_BUILDDIR):
	mkdir -p $@

endif

.PHONY: oldconfig xconfig gconfig menuconfig config silentoldconfig \
	update-po-config localmodconfig localyesconfig defconfig

oldconfig xconfig gconfig menuconfig config silentoldconfig update-po-config \
	localmodconfig localyesconfig defconfig:
	$(MAKE) -C kconfig $@

.PHONY: clean clean-config clean-build show-var
clean: clean-build

clean-config:
	rm -f $(CONFIG)
	$(MAKE) -C kconfig clean

clean-build:
	rm -rf $(WORKDIR)
	.stamp*

show-var:
ifndef VARNAME
	$(error VARNAME must be set to the name of the variable to print)
else
	@echo $($(VARNAME))
endif

